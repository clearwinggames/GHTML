<html><head><script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js'></script><title>ivanCastle120</title></head><body><div id='canvasDiv' onclick='this.requestFullscreen();'  style='position: absolute; text-align: center; width: 800; height: 600'><canvas id='threeCanvas' style='position: absolute; display: block; margin: auto; width: 100%; height: 100%; top: 0; left: 0; z-index:40;' onclick=''></canvas><canvas id='gameCanvas' style='position: absolute; top: 0; left: 0; z-index:60; width: 100%; height: 100%; display: block; margin: auto' onclick=''></canvas></div><script type="text/javascript">
function cursorOverlap(x1, y1, h, w, x2, y2) { let r = x1 + w; let b = y1 + h; if (x2 >= x1 && x2 <= r) {if (y2 >= y1 && y2 <= b) { return true; } } return false; }var mouseCursor = {X:-150,Y:-350};
var prevX = 0;
var prevY = 0;
document.onmousemove = function(e) { if (keyval('h')==true) { prevX = 0; prevY = 0; } else { mouseCursor.X -= (prevX - e.pageX); mouseCursor.Y -= (prevY - e.pageY); prevX = e.pageX; prevY = e.pageY; drawString(mouseCursor.X, mouseCursor.Y, '+', '#FFF', 12); } };
function gameClick() { if (keyval('leftclick')==true) { for(var i in game.active().MyDashboard.MyBars) { let label = game.active().MyDashboard.MyBars[i]; if (cursorOverlap(label.X, label.Y, label.H, label.calculateWidth(), mouseCursor.X, mouseCursor.Y) == true) { label.submit(); } } } refreshClicks(); }
function refreshClicks() { keydown[1] = false; keydown[2] = false; keydown[3] = false; }

/* begin RDS HTMLCoreLoop for canvas */

/* basic supporting infrastructure */

/* Game loop itself */

THREE.Cache.enabled = true;
var FPS = 30;
var activeMidi = {};
function find(array, name) { return array.find(function(arr) { return arr.Name === name; }); }
function checkOverlap(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W) && (one.Y + one.H > two.Y && one.Y < two.Y + two.H); }
function resize2D(x,y) { if (y !== null && y > 0) { h2d=y; } if (x !== null && x > 0) { w2d=x; } }
function getXDrawBounds2D() { return 1600 * w2d; }
function getYDrawBounds2D() { return 1000 * h2d; }
function viewportCenterX() { return getXDrawBounds2D() / 2; }
function viewportCenterY() { return getYDrawBounds2D() / 2; }
var blockInput = false;
function BlockInput() { blockInput = true; }function wouldCollide(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W && one.Y + one.H > two.Y && one.Y < two.Y + two.H); }function downkey() { return keyval('down'); }
function upkey() { return keyval('up'); }
function leftkey() { return keyval('left'); }
function rightkey() { return keyval('right'); }
var keydown = { }; 
window.onkeyup = function(e) { keydown[e.keyCode] = false; }
window.onkeydown = function(e) { keydown[e.keyCode] = true; }
window.onclick = function(e) { keydown[e.which] = true; }
function keyval(input) {
 if (blockInput === true) { return false; }
if (keydown[lookup(input)] === true) {
return true;
}
}
function lookup(input) {
if (input === 'leftclick') { return 1; }
if (input === 'middleclick') { return 2; }
if (input === 'rightclick') { return 3; }
if (input === 'tab') { return 9; }
if (input === 'enter') { return 13; }
if (input === 'escape') { return 27; }
if (input === 'space') { return 32; }
if (input === 'left') { return 37; }
if (input === 'up') { return 38; }
if (input === 'right') { return 39; }
if (input === 'down') { return 40; }
if (input === '0') { return 48; }
if (input === '1') { return 49; }
if (input === '2') { return 50; }
if (input === '3') { return 51; }
if (input === '4') { return 52; }
if (input === '5') { return 53; }
if (input === '6') { return 54; }
if (input === '7') { return 55; }
if (input === '8') { return 56; }
if (input === '9') { return 57; }
if (input === 'a') { return 65; }
if (input === 'b') { return 66; }
if (input === 'c') { return 67; }
if (input === 'd') { return 68; }
if (input === 'e') { return 69; }
if (input === 'f') { return 70; }
if (input === 'g') { return 71; }
if (input === 'h') { return 72; }
if (input === 'i') { return 73; }
if (input === 'j') { return 74; }
if (input === 'k') { return 75; }
if (input === 'l') { return 76; }
if (input === 'm') { return 77; }
if (input === 'n') { return 78; }
if (input === 'o') { return 79; }
if (input === 'p') { return 80; }
if (input === 'q') { return 81; }
if (input === 'r') { return 82; }
if (input === 's') { return 83; }
if (input === 't') { return 84; }
if (input === 'u') { return 85; }
if (input === 'v') { return 86; }
if (input === 'w') { return 87; }
if (input === 'x') { return 88; }
if (input === 'y') { return 89; }
if (input === 'z') { return 90; }
}
var w2d = 0.8;
var h2d = 0.8;
var w3d = 1;
var h3d = 0.8;
var w2dd = 1;
var h2dd = 1;
var clearRect = true;
function askStartGame() { if(confirm('Are you sure you want to start the game?')) { startGame(); } }
function startGame() {
runMainSetup();
setInterval(function () 
{
resize2D(game.active().XResolution2D, game.active().YResolution2D);
gameClick();
draw();
update();
blockInput = false;
}, 1000 / FPS);
}
function draw() {
reallignCanvases();
document.getElementById('threeCanvas').width = window.innerWidth * w3d;
document.getElementById('gameCanvas').width = window.innerWidth * w2d;
document.getElementById('threeCanvas').height = window.innerHeight * h3d;
document.getElementById('gameCanvas').height = window.innerHeight * h2d;
if (clearRect === true) { var can = getCanvas(); can.clearRect(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd); /*drawRectangle(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd,'#007');*/ }
game.draw();
}
function update() {
if (keyval('0')) { document.getElementById('canvasDiv').requestFullscreen(); }
if (typeof serverSync === 'function') { serverSync(game); }game.update();
}
var cwg = null;/*game.Classes;*/
/* end RDS HTMLCoreLoop for canvas */
var game = {"hasChangeStack":
 function() { return (typeof localChangeStack != 'undefined' && localChangeStack instanceof Array); }
,"loadDash":
 function(nameOf) { for(var i in this.DataLibrary.DataViews) {if (this.DataLibrary.DataViews[i].Name==nameOf) {game.active().loadedDash = this.DataLibrary.DataViews[i].asDashboard();}}}
,"isObjectEmpty":
 function(obj) { return (Object.keys(obj).length === 0 && obj.constructor === Object); }
,"save":
 function() {game.EventBoard.saveGame();}
,"scene":
 function() {return this.active().active();}
,"renderMessage":
 function(msg) {drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, msg, '#FFF');}
,"message":
 function(msg) {this.messages.push({MSG:msg, update: function() { game.renderMessage(this.MSG); } } );}
,"fadingMessage":
 function(msg,dur) {this.fadingMessages.push({MSG:msg,Duration:dur,ct:0,render:function() { drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, this.MSG, '#FFF'); },update:function() { if (this.ct < this.Duration) { this.ct++; this.render(); } else { game.fadingMessages.splice(0, 1); game.unpause(); } }})}
,"interruptMessage":
 function(msg,dur) {this.fadingMessage(msg, dur); this.pause();}
,"getConfirmation":
 function(msg,runWith) {this.confirmations.push({MSG:msg,entry:0,OnEntry:runWith}); this.pause();}
,"dispelMessage":
 function(msg) {this.message(msg); this.pause();}
,"active":
 function() { return this.SceneContexts[this.Target]; }
,"setup":
function() { this.AOPEngine.setup(); for(var i in this.SceneContexts) { this.SceneContexts[i].setup(); }  }
,"findEntity":
function(entName) { return find(this.scene().allEntities(), entName); }
,"findThrentity":
function(threntName) { return find(this.scene().Threntities, threntName); }
,"update":
function() {if (this.shouldUpdate) {this.SceneContexts[this.Target].update(); }this.updateFadingMessages();this.updateConfirmations();this.updateMessages();}
,"updateConfirmations":
 function() {if (this.confirmations.length > 0) { game.renderMessage(this.confirmations[0].MSG);  if (this.confirmations[0].entry == 0) { drawRectangle(248,456,40,32,'#BBB'); } else { drawRectangle(536,456,40,32,'#BBB'); } if (game.active().isNewPress('left')) { this.confirmations[0].entry = 0; } else if (game.active().isNewPress('right')) { this.confirmations[0].entry = 1; } if (game.active().isNewPress('s')) { this.unpause(); this.confirmations[0].OnEntry(this.confirmations[0].entry); this.confirmations.splice(0, 1); } drawString(256, 480, 'Yes','#FFF'); drawString(544,480,'No','#FFF'); }}
,"updateMessages":
 function() {if (this.messages.length > 0) { this.messages[0].update(); } if (keydown.enter || keydown.space) { this.messages.splice(0,1); this.unpause(); }}
,"updateFadingMessages":
 function() {if (this.fadingMessages.length > 0) { this.fadingMessages[0].update(); }}
,"confirmations":
[]
,"fadingMessages":
[]
,"messages":
[]
,"draw":
function() {/*drawString(64, 64, this.Name, '#FFF');*/this.SceneContexts[this.Target].draw();}
,"pause":
 function() {this.shouldUpdate = false;}
,"unpause":
 function() {this.shouldUpdate = true;}
,"shouldUpdate":
true
,"GameData":"","Target":0,"ServerId":null,"SceneContexts":[{"active":
function() {return this.Scenes[this.Target];}
,"setScene":
 function(index) {for( var i = scene.children.length - 1; i >= 0; i--) { var toClear = scene.children[i]; scene.remove(toClear); } this.Target = index; if (!this.active().isSetup || this.active().isSetup) { this.active().setup(); } this.active().reloadThrentities(); /*this.active().loadScene();*/}
,"setup":
 function() { this.MyDashboard.initialize();this.active().setup();}
,"update":
function() { this.Scenes[this.Target].update();this.MyLogic.update();for(var i in this.SceneGrids) { this.SceneGrids[i].update(this.SceneGrids[i].TargetEntity); }for(var i in this.KeyHandlers) { this.KeyHandlers[i].update(); } }
,"isNewPress":
 function(key) {for(var i in this.KeyHandlers) { if (this.KeyHandlers[i].KeyName == key) { return this.KeyHandlers[i].isNewPress(); } } return false;}
,"draw":
function() { this.Scenes[this.Target].draw();this.activeDash().draw();}
,"resetDash":
function() { this.loadedDash = {}; }
,"loadedDash":
{}
,"hasLoadedDash":
function() { return game.isObjectEmpty(this.loadedDash) != true; }
,"activeDash":
 function() { if (this.hasLoadedDash() == true) {return this.loadedDash;}else { return this.MyDashboard; }}
,"Target":0,"Scenes":[{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
 function() {loadThrentitiesIntoNewScene(this.allThrentities());}
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"TileGrids":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":415}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":396},"Name":"","LocalData":"","TypeName":"LogicBox","Id":396},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":396},"MyColor":"","X":320,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":396},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":416}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":397},"Name":"","LocalData":"","TypeName":"LogicBox","Id":397},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":397},"MyColor":"","X":320,"Y":300,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":397},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":417}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":398},"Name":"","LocalData":"","TypeName":"LogicBox","Id":398},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":398},"MyColor":"","X":320,"Y":280,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":398},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":418}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":399},"Name":"","LocalData":"","TypeName":"LogicBox","Id":399},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":399},"MyColor":"","X":320,"Y":260,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":399},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":419}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":400},"Name":"","LocalData":"","TypeName":"LogicBox","Id":400},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":400},"MyColor":"","X":320,"Y":240,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":400},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":420}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":401},"Name":"","LocalData":"","TypeName":"LogicBox","Id":401},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":401},"MyColor":"","X":320,"Y":220,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":401},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":421}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":402},"Name":"","LocalData":"","TypeName":"LogicBox","Id":402},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":402},"MyColor":"","X":320,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":402},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":422}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":403},"Name":"","LocalData":"","TypeName":"LogicBox","Id":403},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":403},"MyColor":"","X":320,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":403},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":423}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":404},"Name":"","LocalData":"","TypeName":"LogicBox","Id":404},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":404},"MyColor":"","X":340,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":404},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":424}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":405},"Name":"","LocalData":"","TypeName":"LogicBox","Id":405},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":405},"MyColor":"","X":340,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":405},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":425}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":406},"Name":"","LocalData":"","TypeName":"LogicBox","Id":406},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":406},"MyColor":"","X":340,"Y":340,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":406},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":426}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":407},"Name":"","LocalData":"","TypeName":"LogicBox","Id":407},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":407},"MyColor":"","X":340,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":407},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":427}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":408},"Name":"","LocalData":"","TypeName":"LogicBox","Id":408},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":408},"MyColor":"","X":320,"Y":320,"W":16,"H":16,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":408}],"Threntities":[{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1951},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1951},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4321}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13651},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000cl","LocalData":"","TypeName":"Threntity","Id":1951},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1952},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1952},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4322},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4323},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4324},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4325},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4326},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4327},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4328},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4329},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4330},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4331},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4332},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4333},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4334},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4335},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4336}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13658},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000flr","LocalData":"","TypeName":"Threntity","Id":1952},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":-608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1953},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1953},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4337}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13665},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w1p1","LocalData":"","TypeName":"Threntity","Id":1953},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1954},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1954},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4338}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13672},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w1p2","LocalData":"","TypeName":"Threntity","Id":1954},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1955},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1955},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4339}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13679},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w2p1","LocalData":"","TypeName":"Threntity","Id":1955},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1956},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1956},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4340}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13686},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w2p2","LocalData":"","TypeName":"Threntity","Id":1956},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":-608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1957},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1957},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4341}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13693},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w3p1","LocalData":"","TypeName":"Threntity","Id":1957},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1958},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1958},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4342}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13700},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w3p2","LocalData":"","TypeName":"Threntity","Id":1958},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":-1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1959},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1959},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4343}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13707},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w4p1","LocalData":"","TypeName":"Threntity","Id":1959},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":-1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1960},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1960},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4344}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13714},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding000w4p2","LocalData":"","TypeName":"Threntity","Id":1960},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1961},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1961},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4345}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13721},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001cl","LocalData":"","TypeName":"Threntity","Id":1961},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1962},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1962},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4346},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4347},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4348},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4349},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4350},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4351},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4352},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4353},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4354},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4355},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4356},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4357},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4358},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4359},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4360}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13728},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001flr","LocalData":"","TypeName":"Threntity","Id":1962},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":-608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1963},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1963},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4361}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13735},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w1p1","LocalData":"","TypeName":"Threntity","Id":1963},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1964},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1964},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4362}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13742},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w1p2","LocalData":"","TypeName":"Threntity","Id":1964},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1965},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1965},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4363}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13749},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w2p1","LocalData":"","TypeName":"Threntity","Id":1965},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1966},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1966},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4364}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13756},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w2p2","LocalData":"","TypeName":"Threntity","Id":1966},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":-608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1967},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1967},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4365}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13763},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w3p1","LocalData":"","TypeName":"Threntity","Id":1967},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":608,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1968},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1968},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4366}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13770},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w3p2","LocalData":"","TypeName":"Threntity","Id":1968},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":-1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1969},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1969},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4367}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13777},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w4p1","LocalData":"","TypeName":"Threntity","Id":1969},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":-1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1970},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1970},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4368}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13784},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding001w4p2","LocalData":"","TypeName":"Threntity","Id":1970},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1971},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1971},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4369}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13791},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100cl","LocalData":"","TypeName":"Threntity","Id":1971},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1972},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1972},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4370},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4371},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4372},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4373},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4374},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4375},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4376},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4377},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4378},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4379},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4380},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4381},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4382},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4383},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4384}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13798},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100flr","LocalData":"","TypeName":"Threntity","Id":1972},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":1440,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1973},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1973},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4385}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13805},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w1p1","LocalData":"","TypeName":"Threntity","Id":1973},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":2656,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1974},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1974},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4386}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13812},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w1p2","LocalData":"","TypeName":"Threntity","Id":1974},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1975},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1975},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4387}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13819},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w2p1","LocalData":"","TypeName":"Threntity","Id":1975},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1976},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1976},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4388}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13826},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w2p2","LocalData":"","TypeName":"Threntity","Id":1976},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":1440,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1977},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1977},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4389}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13833},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w3p1","LocalData":"","TypeName":"Threntity","Id":1977},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":2656,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1978},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1978},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4390}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13840},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w3p2","LocalData":"","TypeName":"Threntity","Id":1978},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1979},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1979},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4391}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13847},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w4p1","LocalData":"","TypeName":"Threntity","Id":1979},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1980},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1980},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4392}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13854},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding100w4p2","LocalData":"","TypeName":"Threntity","Id":1980},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1981},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1981},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4393}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13861},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101cl","LocalData":"","TypeName":"Threntity","Id":1981},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1982},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1982},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4394},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4395},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4396},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4397},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4398},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4399},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4400},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4401},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4402},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4403},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4404},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4405},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4406},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4407},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4408}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13868},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101flr","LocalData":"","TypeName":"Threntity","Id":1982},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":1440,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1983},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1983},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4409}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13875},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w1p1","LocalData":"","TypeName":"Threntity","Id":1983},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":2656,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1984},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1984},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4410}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13882},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w1p2","LocalData":"","TypeName":"Threntity","Id":1984},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1985},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1985},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4411}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13889},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w2p1","LocalData":"","TypeName":"Threntity","Id":1985},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1986},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1986},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4412}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13896},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w2p2","LocalData":"","TypeName":"Threntity","Id":1986},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":1440,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1987},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1987},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4413}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13903},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w3p1","LocalData":"","TypeName":"Threntity","Id":1987},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":2656,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1988},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1988},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4414}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13910},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w3p2","LocalData":"","TypeName":"Threntity","Id":1988},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1989},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1989},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4415}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13917},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w4p1","LocalData":"","TypeName":"Threntity","Id":1989},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":1024,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1990},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1990},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4416}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13924},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding101w4p2","LocalData":"","TypeName":"Threntity","Id":1990},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1991},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1991},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4417}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13931},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200cl","LocalData":"","TypeName":"Threntity","Id":1991},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1992},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1992},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4418},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4419},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4420},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4421},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4422},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4423},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4424},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4425},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4426},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4427},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4428},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4429},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4430},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4431},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4432}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13938},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200flr","LocalData":"","TypeName":"Threntity","Id":1992},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":3488,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1993},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1993},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4433}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13945},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w1p1","LocalData":"","TypeName":"Threntity","Id":1993},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":4704,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1994},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1994},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4434}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13952},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w1p2","LocalData":"","TypeName":"Threntity","Id":1994},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":5120,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1995},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1995},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4435}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13959},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w2p1","LocalData":"","TypeName":"Threntity","Id":1995},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":5120,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1996},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1996},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4436}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13966},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w2p2","LocalData":"","TypeName":"Threntity","Id":1996},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":3488,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1997},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1997},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4437}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13973},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w3p1","LocalData":"","TypeName":"Threntity","Id":1997},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-2048,"Y":0,"Z":4704,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1998},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1998},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4438}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13980},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w3p2","LocalData":"","TypeName":"Threntity","Id":1998},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":-1120,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":1999},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":1999},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4439}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13987},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w4p1","LocalData":"","TypeName":"Threntity","Id":1999},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":1120,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2000},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2000},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4440}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":13994},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding200w4p2","LocalData":"","TypeName":"Threntity","Id":2000},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2001},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2001},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stTl.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stTl');}
,"NameOfTarget":"stTl","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4441}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14001},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201cl","LocalData":"","TypeName":"Threntity","Id":2001},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":4096,"Y":-384,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4096,"H":4,"D":2048,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2002},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2002},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4442},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4443},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4444},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4445},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4446},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4447},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4448},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4449},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4450},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4451},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4452},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4453},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4454},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4455},{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4456}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14008},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201flr","LocalData":"","TypeName":"Threntity","Id":2002},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":3488,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2003},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2003},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4457}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14015},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w1p1","LocalData":"","TypeName":"Threntity","Id":2003},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":6144,"Y":0,"Z":4704,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2004},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2004},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4458}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14022},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w1p2","LocalData":"","TypeName":"Threntity","Id":2004},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":5120,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2005},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2005},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4459}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14029},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w2p1","LocalData":"","TypeName":"Threntity","Id":2005},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":5120,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2006},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2006},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4460}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14036},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w2p2","LocalData":"","TypeName":"Threntity","Id":2006},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":3488,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2007},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2007},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4461}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14043},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w3p1","LocalData":"","TypeName":"Threntity","Id":2007},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2048,"Y":0,"Z":4704,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":4,"H":768,"D":832,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2008},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2008},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4462}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14050},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w3p2","LocalData":"","TypeName":"Threntity","Id":2008},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":2976,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2009},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2009},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4463}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14057},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w4p1","LocalData":"","TypeName":"Threntity","Id":2009},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":5216,"Y":0,"Z":3072,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":1856,"H":768,"D":4,"TileX":9,"TileY":4,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2010},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2010},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stW.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"getMaterial":
function(thrent) { if (Object.keys(this.material).length == 0) { return this.setupMaterial(thrent); } else { return this.material; } }
,"setupMaterial":
function(thrent) {   var texture = new THREE.TextureLoader().load( this.imageFilePath );if (thrent.TileX > 0 && thrent.TileY > 0) { texture.wrapS = THREE.RepeatWrapping; texture.wrapT = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, thrent.TileY ); } else if (thrent.TileX > 0) { texture.wrapS = THREE.RepeatWrapping; texture.repeat.set( thrent.TileX, 1 ); } else if (thrent.TileY > 0) { texture.wrapT = THREE.RepeatWrapping; texture.repeat.set(1, thrent.TileY ); } var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; return this.material; }
,"material":
{}
,"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stW');}
,"NameOfTarget":"stW","Name":"","LocalData":"","TypeName":"ThrentityImageFrame","Id":4464}],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14064},"MyPrimitives":[],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"blding201w4p2","LocalData":"","TypeName":"Threntity","Id":2010},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2011},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2011},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14071},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":1800,"fY":1200,"fZ":1200,"sX":1200,"sY":1200,"sZ":1200,"tX":1200,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":553},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":554}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":315},"Name":"","LocalData":"","TypeName":"Primitive","Id":315},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":1200,"fY":1200,"fZ":1800,"sX":1800,"sY":1200,"sZ":1800,"tX":1800,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":555},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":556}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":316},"Name":"","LocalData":"","TypeName":"Primitive","Id":316}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2011},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2012},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2012},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14078},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":1200,"sX":1800,"sY":1200,"sZ":1200,"tX":1800,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":557},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":558}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":317},"Name":"","LocalData":"","TypeName":"Primitive","Id":317},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":1800,"fY":1200,"fZ":1800,"sX":2400,"sY":1200,"sZ":1800,"tX":2400,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":559},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":560}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":318},"Name":"","LocalData":"","TypeName":"Primitive","Id":318}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2012},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2013},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2013},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14085},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":600,"sX":1800,"sY":1200,"sZ":600,"tX":1800,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":561},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":562}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":319},"Name":"","LocalData":"","TypeName":"Primitive","Id":319},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":1800,"fY":1200,"fZ":1200,"sX":2400,"sY":1200,"sZ":1200,"tX":2400,"tY":1200,"tZ":600,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":563},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":564}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":320},"Name":"","LocalData":"","TypeName":"Primitive","Id":320}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2013},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2014},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2014},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14092},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":3000,"fY":1200,"fZ":600,"sX":2400,"sY":1200,"sZ":600,"tX":2400,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":565},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":566}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":321},"Name":"","LocalData":"","TypeName":"Primitive","Id":321},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":1200,"sX":3000,"sY":1200,"sZ":1200,"tX":3000,"tY":1200,"tZ":600,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad1');}
,"NameOfTarget":"altquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":567},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'altquad2');}
,"NameOfTarget":"altquad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":568}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":322},"Name":"","LocalData":"","TypeName":"Primitive","Id":322}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2014},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2015},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2015},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14099},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":3000,"fY":1200,"fZ":1200,"sX":2400,"sY":1200,"sZ":1200,"tX":2400,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorquad1');}
,"NameOfTarget":"floorquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":569},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":570}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":323},"Name":"","LocalData":"","TypeName":"Primitive","Id":323},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":1800,"sX":3000,"sY":1200,"sZ":1800,"tX":3000,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad1');}
,"NameOfTarget":"floorQuad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":571},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":572}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":324},"Name":"","LocalData":"","TypeName":"Primitive","Id":324}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2015},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2016},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2016},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14106},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":3600,"fY":1200,"fZ":1200,"sX":3000,"sY":1200,"sZ":1200,"tX":3000,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorquad1');}
,"NameOfTarget":"floorquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":573},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":574}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":325},"Name":"","LocalData":"","TypeName":"Primitive","Id":325},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":3000,"fY":1200,"fZ":1800,"sX":3600,"sY":1200,"sZ":1800,"tX":3600,"tY":1200,"tZ":1200,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad1');}
,"NameOfTarget":"floorQuad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":575},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":576}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":326},"Name":"","LocalData":"","TypeName":"Primitive","Id":326}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2016},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2017},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2017},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14113},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":1800,"sX":1800,"sY":1200,"sZ":1800,"tX":1800,"tY":1200,"tZ":2400,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorquad1');}
,"NameOfTarget":"floorquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":577},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":578}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":327},"Name":"","LocalData":"","TypeName":"Primitive","Id":327},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":1800,"fY":1200,"fZ":2400,"sX":2400,"sY":1200,"sZ":2400,"tX":2400,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad1');}
,"NameOfTarget":"floorQuad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":579},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":580}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":328},"Name":"","LocalData":"","TypeName":"Primitive","Id":328}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2017},{"drop":
 function() {game.scene().Threntities.splice(this.MyIndex, 1);}
,"transpose":
 function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };}
,"setup":
 function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);}
,"cycleLogic":
function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } 
,"setImageTarget":
function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); }
,"draw":
 function() {}
,"update":
 function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}}
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"myCube":
 function() {return this.cube;}
,"cube":
{}
,"updateCubeMaterial":
function() { }
,"updateCube":
 function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;}
,"doesBorder":
 function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;}
,"collideZX":
 function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);}
,"collideX":
 function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));}
,"collideY":
 function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));}
,"collideZ":
 function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));}
,"wouldCollide":
 function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);}
,"jump":
 function(thrust) {if (this.notFalling()) { this.MY = thrust; }}
,"notFalling":
 function() {return this.MY == 0 && this.prevMY == 0;}
,"MyIndex":0,"X":0,"Y":0,"Z":0,"MX":0,"MY":0,"MZ":0,"prevMY":0,"W":0,"H":0,"D":0,"TileX":0,"TileY":0,"isActive":
true
,"Omnipresent":false,"AnimationCount":0,"MyLogic":{"cycleArrowKeysLeft":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysLeft(this.MyInputs); }}
,"cycleArrowKeysRight":
 function() {for (var i in this.MyInputs) { this.MyInputs[i].cycleArrowKeysRight(this.MyInputs); }}
,"setup":
 function(index) {for (var i in this.MyInputs) { this.MyInputs[i].setup(index); }this.ActionBlock.setup(index);for (var i in this.OnUpdate) { this.OnUpdate[i].setup(index); }}
,"MyInputs":[],"OnUpdate":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct  < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ThrentityActionDescriptionBlock","Id":2018},"Name":"","LocalData":"","TypeName":"ThrentityLogicBox","Id":2018},"MyTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"UpTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"DownTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"EastTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"WestTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"NorthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"SouthTexture":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ThrentityImageBox","Id":14120},"MyPrimitives":[{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":3000,"fY":1200,"fZ":1800,"sX":2400,"sY":1200,"sZ":1800,"tX":2400,"tY":1200,"tZ":2400,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorquad1');}
,"NameOfTarget":"floorquad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":581},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":582}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":329},"Name":"","LocalData":"","TypeName":"Primitive","Id":329},{"update":
function() { if (this.PrimitiveImages.CycleLength > 0) { this.cycleLogic(); } }
,"setup":
function(pThren) { if (this.IsQuad) { this.setupQuad(pThren); } else if (this.hasTexture() !== true) { this.primMesh = this.setupPrimitive(); } else { this.primMesh = this.setupPrimitiveAs(this); } }
,"hasTexture":
function() { return !(this.PrimitiveImages === null || this.PrimitiveImages.ImageFrames === null || this.PrimitiveImages.ImageFrames.length === 0); }
,"setupQuad":
function(pThren) { var o = this.oppositePrimitive(); if (this.hasTexture() === true) { this.quad = {fX:o.fX,fY:o.fY,fZ:o.fZ,sX:o.sX,sY:o.sY,sZ:o.sZ,tX:o.tX,tY:o.tY,tZ:o.tZ,IsQuad:true,PrimitiveImages:this.PrimitiveImages,AnimationCount:0}; this.quad.hasQuad = this.hasQuad; this.quad.primMesh = setupPrimitiveAs(this.quad); this.quad.cycleLogic = this.cycleLogic; this.quad.setImageTarget = this.setImageTarget; } else { this.primMesh = setupPrimitive(o.fX,o.fY,o.fZ,o.sX,o.sY,o.sZ,o.tX,o.tY,o.tZ,this.MyColor); } this.IsQuad = false; this.setup(pThren); }
,"primMesh":
{}
,"hasQuad":
function() { if (this.quad) { return game.isObjectEmpty(this.quad); } return false; }
,"quad":
{}
,"oppositePrimitive":
function() { var f = getVectorDifference(this.getT(), this.getS()); var n = combineVectors(f, this.getF()); return {fX:this.fX,fY:this.fY,fZ:this.fZ,sX:n.X,sY:n.Y,sZ:n.Z,tX:this.tX,tY:this.tY,tZ:this.tZ}; }
,"setupPrimitive":
function() { this.primMesh = setupPrimitive(this.fX, this.fY, this.fZ, this.sX, this.sY, this.sZ, this.tX, this.tY, this.tZ, this.MyColor); return this.primMesh; }
,"setupPrimitiveAs":
function() { this.primMesh = setupPrimitiveAs(this); return this.primMesh; }
,"getF":
function() { return {X:this.fX,Y:this.fY,Z:this.fZ}; }
,"setF":
function(f) { this.fX=f.X;this.fY=f.Y;this.fZ=f.Z; }
,"getS":
function() { return {X:this.sX,Y:this.sY,Z:this.sZ}; }
,"setS":
function(s) { this.sX=s.X;this.sY=s.Y;this.sZ=s.Z; }
,"getT":
function() { return {X:this.tX,Y:this.tY,Z:this.tZ}; }
,"setT":
function(t) { this.tX=t.X;this.tY=t.Y;this.tZ=t.Z; }
,"cycleLogic":
function() { if (this.hasQuad()==true&&this.quad.cycleLogic) { this.quad.cycleLogic(); } if (this.AnimationCount >= this.PrimitiveImages.CycleLength) { this.AnimationCount = 0; if (this.PrimitiveImages.ImageFrames.length <= this.PrimitiveImages.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.PrimitiveImages.Target + 1); } } else { this.AnimationCount++; } } 
,"setImageTarget":
function(target) { if (this.hasQuad()==true) { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = /*this.quad.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material =*/ this.primMesh.material; } else { this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].material = this.primMesh.material; } this.PrimitiveImages.Target = target; this.primMesh.material = this.PrimitiveImages.ImageFrames[this.PrimitiveImages.Target].getMaterial(); }
,"fX":2400,"fY":1200,"fZ":2400,"sX":3000,"sY":1200,"sZ":2400,"tX":3000,"tY":1200,"tZ":1800,"IsQuad":false,"AnimationCount":0,"MyColor":"","PrimitiveImages":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad1');}
,"NameOfTarget":"floorQuad1","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":583},{"getMaterial":
function() { if (Object.keys(this.material).length == 0) { return this.setupMaterial(); } else { return this.material; } }
,"setupMaterial":
function() {  var texture = new THREE.TextureLoader().load( this.imageFilePath );  var material = new THREE.MeshBasicMaterial({map: texture,overdraw: 0.5 });this.material = material; this.originalMaterial = material; return this.material; }
,"originalMaterial":
{}
,"material":
{}
,"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'floorQuad2');}
,"NameOfTarget":"floorQuad2","Name":"","LocalData":"","TypeName":"PrimitiveImageFrame","Id":584}],"Name":"","LocalData":"","TypeName":"PrimitiveImageBox","Id":330},"Name":"","LocalData":"","TypeName":"Primitive","Id":330}],"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Threntity","Id":2018}],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":69}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":69},"Name":"","LocalData":"","TypeName":"Scene","Id":69}],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (leftkey()) { camera.rotation.y += 0.03333; }}
,"MyScript":"if (leftkey()) [( camera.rotation.y += 0.03333; )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":181},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (rightkey()) { camera.rotation.y -= 0.03333; }}
,"MyScript":"if (rightkey()) [( camera.rotation.y -= 0.03333; )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":182},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (upkey()) { moveCameraForward(24); }}
,"MyScript":"if (upkey()) [( moveCameraForward(24); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":183},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (downkey()) { moveCameraForward(-24); }}
,"MyScript":"if (downkey()) [( moveCameraForward(-24); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":184},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (keyval('d')) { camera.position.y -= 24; }}
,"MyScript":"if (keyval(**d**)) [( camera.position.y -= 24; )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":185},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (keyval('a')) { camera.position.y += 24; }}
,"MyScript":"if (keyval(**a**)) [( camera.position.y += 24; )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":186}],"Name":"","LocalData":"","TypeName":"SceneContextLogicBox","Id":50},"MyDashboard":{"draw":
 function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } }
,"initialize":
function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }}
,"MyLabels":[],"MyBars":[],"Name":"","LocalData":"","TypeName":"Dashboard","Id":50},"KeyHandlers":[{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":"","LocalData":"","TypeName":"KeyHandler","Id":638},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":"","LocalData":"","TypeName":"KeyHandler","Id":639},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":"","LocalData":"","TypeName":"KeyHandler","Id":640},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":"","LocalData":"","TypeName":"KeyHandler","Id":641},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":"","LocalData":"","TypeName":"KeyHandler","Id":642},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":"","LocalData":"","TypeName":"KeyHandler","Id":643},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":"","LocalData":"","TypeName":"KeyHandler","Id":644},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":"","LocalData":"","TypeName":"KeyHandler","Id":645},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":"","LocalData":"","TypeName":"KeyHandler","Id":646},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":"","LocalData":"","TypeName":"KeyHandler","Id":647},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":"","LocalData":"","TypeName":"KeyHandler","Id":648},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":"","LocalData":"","TypeName":"KeyHandler","Id":649},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":"","LocalData":"","TypeName":"KeyHandler","Id":650}],"XResolution2D":"1.0","YResolution2D":"1.0","getOmni2D":
function(index) { for(var i in this.Omnipresent2D) { if (this.Omnipresent2D[i].MyIndex == index) { return this.Omnipresent2D[i]; } } }
,"getOmni3D":
function(index) { for(var i in this.Omnipresent3D) { if (this.Omnipresent3D[i].MyIndex == index) { return this.Omnipresent3D[i]; } } }
,"Omnipresent2D":
[]
,"Omnipresent3D":
[]
,"SceneGrids":[],"Name":"","LocalData":"","TypeName":"SceneContext","Id":50}],"EventBoard":{"setEventValue":
 function(nameOf,value) {for(var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { this.EventItems[i].Value = value; return 'success'; } } this.addEvent(nameOf,value);}
,"addEvent":
 function(nameOf,value) {this.EventItems.push({Name:nameOf,Value:value})}
,"getEventValue":
 function(nameOf) {for (var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { return this.EventItems[i].Value; } } return 'null';}
,"webServiceUrl":
 function(loadVsSave) {var locRef = location.href; var segments = locRef.split('/'); locRef = segments[0] + '//' + segments[2] + '/AccessObject.asmx/' + (loadVsSave ? 'Load' : 'Save') + 'Game'; return locRef;}
,"loadGame":
 function(targetIndex) {var newData = '';function storeData(data) { xData = data.substring(data.indexOf('http://clearwinggames.com/') + 28); xData = xData.replace('</string>',''); alert(xData); newData = xData; integrateData(xData); }var loadObj = {GameSave:{},GameName:game.Name,TargetIndex:targetIndex};$.get(this.webServiceUrl(true),'jsonObject=' + JSON.stringify(loadObj),function(data){ alert(data); storeData(data); },'text');function integrateData(xData) {alert('running ' + xData + 'against eventboard.');var newObj = jQuery.parseJSON(xData);for (var i in newObj.Deliverable.DataItems) {if (game.EventBoard.getEventValue(newObj.Deliverable.DataItems[i].Name) !== 'null') { game.EventBoard.setEventValue(newObj.Deliverable.DataItems[i].Name, newObj.Deliverable.DataItems[i].Value); } else {game.EventBoard.EventItems.push({ Value: newObj.Deliverable.DataItems[i].Value }); }}}}
,"saveGame":
 function(targetIndex) {var saveObj = {DataItems: [], GameName: game.Name, TargetIndex:targetIndex };for(var i in this.EventItems) {saveObj.DataItems.push({ Name:this.EventItems[i].Name, Value: this.EventItems[i].Value });}$.post(this.webServiceUrl(false), 'jsonObject=' + JSON.stringify(saveObj), function(data) { alert(data); }, 'text');}
,"EventItems":[],"Name":"","LocalData":"","TypeName":"EventBoard","Id":50},"DataLibrary":{"updateDashboardTo":
function(nameOf) { let dash = this.getViewByName(nameOf).asDashboard(); game.active().MyDashboard = dash; }
,"getViewByName":
function(nameOf) { for (var i in this.DataViews) { if (this.DataViews[i].Name==nameOf) { return this.DataViews[i]; } } }
,"getModelByName":
 function(name) { for(var i in this.DataModels) {if (this.DataModels[i].Name == name) { return this.DataModels[i]; }}return null;}
,"DataModels":[],"DataViews":[],"Name":"","LocalData":"","TypeName":"DataLibrary","Id":50},"AOPEngine":{"setup":
 function() {for(var i in this.AdviceBlocks) { this.AdviceBlocks[i].setup(); }  console.log('aops');}
,"AdviceBlocks":[],"Name":"","LocalData":"","TypeName":"AOPEngine","Id":50},"Classes":
{Entity: function Entity(){this.MyLogic = new game.Classes.LogicBox();;this.MyImage = new game.Classes.ImageBox();;this.MyColor = null;this.X = 0;this.Y = 0;this.W = 32;this.H = 32;this.MX = null;this.MY = null;this.Disabled = null;this.MyIndex = null;this.Omnipresent = null;this.NotWorldLevel = null;this.ForceCollision = null;this.LedgeCollision = null;this.AnimationCount = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } ;this.cycleLogic = function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } ;this.update = function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } ;this.draw =  function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }};this.transpose = function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; };this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.center =  function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };};this.R =  function() {return this.X + this.W;};this.B =  function() {return this.Y + this.H;};this.isAdjacent =  function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;};this.isCentered = function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); };this.pastCenterX = function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); };this.pastCenterY = function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); };this.isCenteredX = function() { return this.myCenterX()===(getXDrawBounds2D()/2);  };this.isCenteredY = function() { return this.myCenterY()===(getYDrawBounds2D()/2); };this.myCenterX = function() { return this.X + (this.W/2);  };this.myCenterY = function() { return this.Y + (this.H/2); };this.myCenter = function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  };this.wouldCollide =  function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());};this.IsAOPObject = function() { return true; };this.TypeName = Entity;},Threntity: function Threntity(){this.MyIndex = null;this.X = null;this.Y = null;this.Z = null;this.MX = null;this.MY = null;this.MZ = null;this.prevMY = null;this.W = null;this.H = null;this.D = null;this.TileX = null;this.TileY = null;this.Omnipresent = null;this.AnimationCount = null;this.MyLogic = null;this.MyTexture = null;this.UpTexture = null;this.DownTexture = null;this.EastTexture = null;this.WestTexture = null;this.NorthTexture = null;this.SouthTexture = null;this.MyPrimitives = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.drop =  function() {game.scene().Threntities.splice(this.MyIndex, 1);};this.transpose =  function(xDisp,yDisp,zDisp) {return { name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, Z: this.Z + zDisp, W: this.W, H: this.H, D: this.D };};this.setup =  function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);};this.cycleLogic = function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } ;this.setImageTarget = function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); };this.draw =  function() {};this.update =  function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}};this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.myCube =  function() {return this.cube;};this.cube = {};this.updateCubeMaterial = function() { };this.updateCube =  function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;};this.doesBorder =  function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;};this.collideZX =  function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);};this.collideX =  function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));};this.collideY =  function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));};this.collideZ =  function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));};this.wouldCollide =  function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);};this.jump =  function(thrust) {if (this.notFalling()) { this.MY = thrust; }};this.notFalling =  function() {return this.MY == 0 && this.prevMY == 0;};this.isActive = true;this.IsAOPObject = function() { return true; };this.TypeName = Threntity;},ImageBox: function ImageBox(){this.Target = null;this.CycleLength = null;this.ImageFrames = [];this.Name = null;this.LocalData = null;this.Id = null;this.active =  function() {return this.ImageFrames[this.Target];};this.TypeName = ImageBox;},LogicBox: function LogicBox(){this.OnUpdate = [];this.MyInputs = [];this.ActionBlock = {setup:function() { },update:function() { }};this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  };this.update =  function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } };this.TypeName = LogicBox;},Dashboard: function Dashboard(){this.MyLabels = null;this.MyBars = null;this.Name = null;this.LocalData = null;this.Id = null;this.draw =  function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } };this.initialize = function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }};this.TypeName = Dashboard;},DashLabel: function DashLabel(){this.Caption = null;this.FontSize = null;this.X = null;this.Y = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.getCaption =  function() { return this.processText(this.Caption);} ;this.setCaption =  function(newCaption) {this.Caption = newCaption;};this.render =  function() {drawString(this.X, this.Y, this.getCaption(), this.MyColor, this.FontSize);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashLabel;},DashBar: function DashBar(){this.X = null;this.Y = null;this.H = null;this.MaxWidth = null;this.MaxValue = null;this.Value = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.calculateWidth =  function() {return this.MaxWidth * (this.Value / this.MaxValue);};this.render =  function() {drawRectangle(this.X, this.Y, this.calculateWidth(), this.H, this.MyColor);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashBar;},}
,"Name":"ivanCastle120","LocalData":"","TypeName":"Game","Id":50};
</script><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stTl" src="http://cwg.dyndns-home.com/Pages/TempImages/stTl.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="stW" src="http://cwg.dyndns-home.com/Pages/TempImages/stW.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="altquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad1.png" style="display: none;" /><img id="altquad2" src="http://cwg.dyndns-home.com/Pages/TempImages/altquad2.png" style="display: none;" /><img id="floorquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorQuad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorQuad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorQuad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorquad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorquad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><img id="floorQuad1" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad1.png" style="display: none;" /><img id="floorQuad2" src="http://cwg.dyndns-home.com/Pages/TempImages/floorQuad2.png" style="display: none;" /><script>function getCanvas()
 {
var canvas = document.getElementById('gameCanvas');
return canvas.getContext('2d');
}
function toggleFullScreen() {
var canv = document.getElementById('gameCanvas');
if (canv.webkitRequestFullscreen) {
canv.webkitRequestFullscreen();
}
else {
canv.mozRequestFullScreen();
}
reallignCanvases();
}
var reallignCanvases = function() {
var rect = document.getElementById('canvasDiv').getBoundingClientRect();
$('#threeCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10});
$('#gameCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10,'position':'absolute'});
}
function cAlert(msg) {
game.fadingMessage(msg, 90);
}
function cAlert(msg,dur) {
game.fadingMessage(msg,dur);
}
function pAlert(msg) {
}
function drawStringWithFont(x, y, msg, colorString, fontData)
 {
getCanvas().font=fontData;
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString)
 {
getCanvas().font='16px Georgia';
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString, fontSize) {
getCanvas().font = fontSize + 'px Georgia';
getCanvas().fillStyle = colorString;
getCanvas().fillText(msg, x, y);
}
function drawRectangle(x, y, w, h, color)
 {
getCanvas().fillStyle = color;
getCanvas().fillRect(x,y,w,h);
}
function drawImage(x, y, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y);
}
}
function drawImage(x, y, w, h, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y, w, h);
} else { alert('imgObj not ready or not found.'); }
}
var context = new (window.AudioContext || window.webkitAudioContext)();
function playNote(note,dur,inst) {
if (note > 0) {
var osc = context.createOscillator(); // instantiate an oscillator
osc.type = inst; // 'sine' is the default - also square, sawtooth, triangle
osc.frequency.value = note; // Hz
osc.connect(context.destination); // connect it to the destination
osc.start(); // start the oscillator
osc.stop(context.currentTime + dur);
}
}
function rgb(r, g, b) {
return 'rgb(' + r.toString() + ',' + g.toString() + ',' + b.toString() + ')';}
var scene = new THREE.Scene();
var threejsClearColor = 0x000000;
var camera = new THREE.PerspectiveCamera( 75, (4/3), 0.25, 18000 );
var renderer = new THREE.WebGLRenderer({ canvas: threeCanvas, alpha: false, autoclear: true });
renderer.setClearColor(threejsClearColor);
function updateClearColor(newColor) { renderer.setClearColor(newColor); }
renderer.setSize(window.innerWidth, window.innerHeight);
camera.position.y = 120;
camera.position.z = 300;
setupContent(scene);
var renderThree = function () {
requestAnimationFrame( renderThree );
renderer.render(scene, camera);
};
renderThree();
function setupContent(scene) {
var geometries = [];
for (var j in geometries) {
for ( var i = 0; i < geometries[j].faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometries[j].faces[ i ].color.setHex( hex );
geometries[j].faces[ i + 1 ].color.setHex( hex );
}
var material = new THREE.MeshBasicMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });var cube = new THREE.Mesh( geometries[j], material );
if (j > 0) { cube.position.z -= (200 * j); }
scene.add(cube);
}
}
function setupThrentity(threntity) {
var geometry = new THREE.BoxGeometry(threntity.W, threntity.H, threntity.D);
if (threntity.MyTexture.ImageFrames.length > 0 && threntity.MyTexture.active().hasImagePath()) {
for(var i = 0; i < 1; i++) {
 if (threntity.MyTexture.ImageFrames[i].hasImagePath()){
var texture = new THREE.TextureLoader().load( threntity.MyTexture.ImageFrames[i].imageFilePath );
if (threntity.TileX > 0 && threntity.TileY > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, threntity.TileY );
}
else if (threntity.TileX > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, 1 );
}
else if (threntity.TileY > 0) { texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set(1, threntity.TileY );
}
}
}
}
for ( var i = 0; i < geometry.faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometry.faces[ i ].color.setHex( hex );
geometry.faces[ i + 1 ].color.setHex( hex );
}
var material;
if (threntity.MyTexture.ImageFrames.length == 0 || !threntity.MyTexture.active().hasImagePath()) {
material = new THREE.MeshBasicMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });
}
 else {
material = new THREE.MeshBasicMaterial({
map: texture,overdraw: 0.5 });
}
var lCube = new THREE.Mesh( geometry, material );
lCube.position.x = threntity.X;
lCube.position.y = threntity.Y;
lCube.position.z = threntity.Z;
threntity.cube = lCube;
scene.add(threntity.myCube());
}
function setupPrimitiveAs(prim) {
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(prim.fX, prim.fY, prim.fZ));
geom.vertices.push(new THREE.Vector3(prim.sX, prim.sY, prim.sZ));
geom.vertices.push(new THREE.Vector3(prim.tX, prim.tY, prim.tZ));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
if (prim.IsQuad === true) {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(1, 0),new THREE.Vector2(0, 0)]; 
 }
else {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(0, 1),new THREE.Vector2(0, 0)]; 
 }
if (prim.PrimitiveImages !== null && prim.PrimitiveImages.ImageFrames !== null && prim.PrimitiveImages.ImageFrames.length > 0 && prim.PrimitiveImages.active().hasImagePath()) {
var texture = new THREE.TextureLoader().load( prim.PrimitiveImages.active().imageFilePath );
material = new THREE.MeshBasicMaterial({
map: texture,side: THREE.DoubleSide,overdraw: 0.5 });
var mesh= new THREE.Mesh(geom, material);
scene.add(mesh);
return mesh;
}
else {
setupPrimitive(prim.fX, prim.fY, prim.fZ, prim.sX, prim.sY, prim.sZ, prim.tX, prim.tY, prim.tZ, prim.MyColor);
}
}
function setupPrimitive(fx, fy, fz, sx, sy, sz, tx, ty, tz, pColor) {
if (pColor === null || pColor.length === 0) { pColor = '#007'; }
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(fx, fy, fz));
geom.vertices.push(new THREE.Vector3(sx, sy, sz));
geom.vertices.push(new THREE.Vector3(tx, ty, tz));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
geom.computeFaceNormals();
var normalMaterial = new THREE.MeshBasicMaterial({color: pColor, side: THREE.DoubleSide});
var mesh= new THREE.Mesh( geom, normalMaterial);
scene.add(mesh);
return mesh;
}
function getVectorDifference(v1, v2) {return {X:v1.X-v2.X,Y:v1.Y-v2.Y,Z:v1.Z-v2.Z};}
function combineVectors(v1, v2) {return {X:v1.X+v2.X,Y:v1.Y+v2.Y,Z:v1.Z+v2.Z};}
function getCameraVector() {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(camera.quaternion);
return vector;
}
function getThrentityVector(thrent) {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(thrent.quaternion);
return vector;
}
function moveCameraForward(amt) {
var targetVector = getCameraVector();
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
camera.position.x += xAmt;
camera.position.y += yAmt;
camera.position.z += zAmt;
}
function moveThrentityForward(thrent, amt) {
var targetVector = getThrentityVector(thrent.myCube());
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
thrent.X += xAmt;
thrent.Y += yAmt;
thrent.Z += zAmt;
}
function runMainSetup() {
 cwg = game.Classes;
mainSetup();
}
function mainSetup() {
reallignCanvases();
game.setup();
}
</script><script>startGame();</script></body></html>