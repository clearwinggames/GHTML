<html><head><script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js'></script><title>ivanGreatForest169</title></head><body><div id='canvasDiv' onclick='this.requestFullscreen();'  style='position: absolute; text-align: center; width: 800; height: 600'><canvas id='threeCanvas' style='position: absolute; display: block; margin: auto; width: 100%; height: 100%; top: 0; left: 0; z-index:40;' onclick=''></canvas><canvas id='gameCanvas' style='position: absolute; top: 0; left: 0; z-index:60; width: 100%; height: 100%; display: block; margin: auto' onclick=''></canvas></div><script type="text/javascript">
function cursorOverlap(x1, y1, h, w, x2, y2) { let r = x1 + w; let b = y1 + h; if (x2 >= x1 && x2 <= r) {if (y2 >= y1 && y2 <= b) { return true; } } return false; }var mouseCursor = {X:-150,Y:-350};
var prevX = 0;
var prevY = 0;
document.onmousemove = function(e) { if (keyval('h')==true) { prevX = 0; prevY = 0; } else { mouseCursor.X -= (prevX - e.pageX); mouseCursor.Y -= (prevY - e.pageY); prevX = e.pageX; prevY = e.pageY; drawString(mouseCursor.X, mouseCursor.Y, '+', '#FFF', 12); } };
function gameClick() { if (keyval('leftclick')==true) { for(var i in game.active().MyDashboard.MyBars) { let label = game.active().MyDashboard.MyBars[i]; if (cursorOverlap(label.X, label.Y, label.H, label.calculateWidth(), mouseCursor.X, mouseCursor.Y) == true) { label.submit(); } } } refreshClicks(); }
function refreshClicks() { keydown[1] = false; keydown[2] = false; keydown[3] = false; }

/* begin RDS HTMLCoreLoop for canvas */

/* basic supporting infrastructure */

/* Game loop itself */

THREE.Cache.enabled = true;
var FPS = 30;
var activeMidi = {};
function find(array, name) { return array.find(function(arr) { return arr.Name === name; }); }
function checkOverlap(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W) && (one.Y + one.H > two.Y && one.Y < two.Y + two.H); }
function resize2D(x,y) { if (y !== null && y > 0) { h2d=y; } if (x !== null && x > 0) { w2d=x; } }
function getXDrawBounds2D() { return 1600 * w2d; }
function getYDrawBounds2D() { return 1000 * h2d; }
function viewportCenterX() { return getXDrawBounds2D() / 2; }
function viewportCenterY() { return getYDrawBounds2D() / 2; }
var blockInput = false;
function BlockInput() { blockInput = true; }function wouldCollide(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W && one.Y + one.H > two.Y && one.Y < two.Y + two.H); }function downkey() { return keyval('down'); }
function upkey() { return keyval('up'); }
function leftkey() { return keyval('left'); }
function rightkey() { return keyval('right'); }
var keydown = { }; 
window.onkeyup = function(e) { keydown[e.keyCode] = false; }
window.onkeydown = function(e) { keydown[e.keyCode] = true; }
window.onclick = function(e) { keydown[e.which] = true; }
function keyval(input) {
 if (blockInput === true) { return false; }
if (keydown[lookup(input)] === true) {
return true;
}
}
function lookup(input) {
if (input === 'leftclick') { return 1; }
if (input === 'middleclick') { return 2; }
if (input === 'rightclick') { return 3; }
if (input === 'tab') { return 9; }
if (input === 'enter') { return 13; }
if (input === 'escape') { return 27; }
if (input === 'space') { return 32; }
if (input === 'left') { return 37; }
if (input === 'up') { return 38; }
if (input === 'right') { return 39; }
if (input === 'down') { return 40; }
if (input === '0') { return 48; }
if (input === '1') { return 49; }
if (input === '2') { return 50; }
if (input === '3') { return 51; }
if (input === '4') { return 52; }
if (input === '5') { return 53; }
if (input === '6') { return 54; }
if (input === '7') { return 55; }
if (input === '8') { return 56; }
if (input === '9') { return 57; }
if (input === 'a') { return 65; }
if (input === 'b') { return 66; }
if (input === 'c') { return 67; }
if (input === 'd') { return 68; }
if (input === 'e') { return 69; }
if (input === 'f') { return 70; }
if (input === 'g') { return 71; }
if (input === 'h') { return 72; }
if (input === 'i') { return 73; }
if (input === 'j') { return 74; }
if (input === 'k') { return 75; }
if (input === 'l') { return 76; }
if (input === 'm') { return 77; }
if (input === 'n') { return 78; }
if (input === 'o') { return 79; }
if (input === 'p') { return 80; }
if (input === 'q') { return 81; }
if (input === 'r') { return 82; }
if (input === 's') { return 83; }
if (input === 't') { return 84; }
if (input === 'u') { return 85; }
if (input === 'v') { return 86; }
if (input === 'w') { return 87; }
if (input === 'x') { return 88; }
if (input === 'y') { return 89; }
if (input === 'z') { return 90; }
}
var w2d = 0.8;
var h2d = 0.8;
var w3d = 1;
var h3d = 0.8;
var w2dd = 1;
var h2dd = 1;
var clearRect = true;
function askStartGame() { if(confirm('Are you sure you want to start the game?')) { startGame(); } }
function startGame() {
runMainSetup();
setInterval(function () 
{
resize2D(game.active().XResolution2D, game.active().YResolution2D);
gameClick();
draw();
update();
blockInput = false;
}, 1000 / FPS);
}
function draw() {
reallignCanvases();
document.getElementById('threeCanvas').width = window.innerWidth * w3d;
document.getElementById('gameCanvas').width = window.innerWidth * w2d;
document.getElementById('threeCanvas').height = window.innerHeight * h3d;
document.getElementById('gameCanvas').height = window.innerHeight * h2d;
if (clearRect === true) { var can = getCanvas(); can.clearRect(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd); /*drawRectangle(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd,'#007');*/ }
game.draw();
}
function update() {
if (keyval('0')) { document.getElementById('canvasDiv').requestFullscreen(); }
if (typeof serverSync === 'function') { serverSync(game); }game.update();
}
var cwg = null;/*game.Classes;*/
/* end RDS HTMLCoreLoop for canvas */
var game = {"hasChangeStack":
 function() { return (typeof localChangeStack != 'undefined' && localChangeStack instanceof Array); }
,"loadDash":
 function(nameOf) { for(var i in this.DataLibrary.DataViews) {if (this.DataLibrary.DataViews[i].Name==nameOf) {game.active().loadedDash = this.DataLibrary.DataViews[i].asDashboard();}}}
,"isObjectEmpty":
 function(obj) { return (Object.keys(obj).length === 0 && obj.constructor === Object); }
,"save":
 function() {game.EventBoard.saveGame();}
,"scene":
 function() {return this.active().active();}
,"renderMessage":
 function(msg) {drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, msg, '#FFF');}
,"message":
 function(msg) {this.messages.push({MSG:msg, update: function() { game.renderMessage(this.MSG); } } );}
,"fadingMessage":
 function(msg,dur) {this.fadingMessages.push({MSG:msg,Duration:dur,ct:0,render:function() { drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, this.MSG, '#FFF'); },update:function() { if (this.ct < this.Duration) { this.ct++; this.render(); } else { game.fadingMessages.splice(0, 1); game.unpause(); } }})}
,"interruptMessage":
 function(msg,dur) {this.fadingMessage(msg, dur); this.pause();}
,"getConfirmation":
 function(msg,runWith) {this.confirmations.push({MSG:msg,entry:0,OnEntry:runWith}); this.pause();}
,"dispelMessage":
 function(msg) {this.message(msg); this.pause();}
,"active":
 function() { return this.SceneContexts[this.Target]; }
,"setup":
function() { this.AOPEngine.setup(); for(var i in this.SceneContexts) { this.SceneContexts[i].setup(); }  }
,"findEntity":
function(entName) { return find(this.scene().allEntities(), entName); }
,"findThrentity":
function(threntName) { return find(this.scene().Threntities, threntName); }
,"update":
function() {if (this.shouldUpdate) {this.SceneContexts[this.Target].update(); }this.updateFadingMessages();this.updateConfirmations();this.updateMessages();}
,"updateConfirmations":
 function() {if (this.confirmations.length > 0) { game.renderMessage(this.confirmations[0].MSG);  if (this.confirmations[0].entry == 0) { drawRectangle(248,456,40,32,'#BBB'); } else { drawRectangle(536,456,40,32,'#BBB'); } if (game.active().isNewPress('left')) { this.confirmations[0].entry = 0; } else if (game.active().isNewPress('right')) { this.confirmations[0].entry = 1; } if (game.active().isNewPress('s')) { this.unpause(); this.confirmations[0].OnEntry(this.confirmations[0].entry); this.confirmations.splice(0, 1); } drawString(256, 480, 'Yes','#FFF'); drawString(544,480,'No','#FFF'); }}
,"updateMessages":
 function() {if (this.messages.length > 0) { this.messages[0].update(); } if (keydown.enter || keydown.space) { this.messages.splice(0,1); this.unpause(); }}
,"updateFadingMessages":
 function() {if (this.fadingMessages.length > 0) { this.fadingMessages[0].update(); }}
,"confirmations":
[]
,"fadingMessages":
[]
,"messages":
[]
,"draw":
function() {/*drawString(64, 64, this.Name, '#FFF');*/this.SceneContexts[this.Target].draw();}
,"pause":
 function() {this.shouldUpdate = false;}
,"unpause":
 function() {this.shouldUpdate = true;}
,"shouldUpdate":
true
,"GameData":"","Target":0,"ServerId":null,"SceneContexts":[{"active":
function() {return this.Scenes[this.Target];}
,"setScene":
 function(index) {for( var i = scene.children.length - 1; i >= 0; i--) { var toClear = scene.children[i]; scene.remove(toClear); } this.Target = index; if (!this.active().isSetup || this.active().isSetup) { this.active().setup(); } this.active().reloadThrentities(); /*this.active().loadScene();*/}
,"setup":
 function() { this.MyDashboard.initialize();this.active().setup();}
,"update":
function() { this.Scenes[this.Target].update();this.MyLogic.update();for(var i in this.SceneGrids) { this.SceneGrids[i].update(this.SceneGrids[i].TargetEntity); }for(var i in this.SceneCubes) { this.SceneCubes[i].update(this.SceneCubes[i].TargetEntity); }for(var i in this.KeyHandlers) { this.KeyHandlers[i].update(); } }
,"isNewPress":
 function(key) {for(var i in this.KeyHandlers) { if (this.KeyHandlers[i].KeyName == key) { return this.KeyHandlers[i].isNewPress(); } } return false;}
,"draw":
function() { this.Scenes[this.Target].draw();this.activeDash().draw();}
,"resetDash":
function() { this.loadedDash = {}; }
,"loadedDash":
{}
,"hasLoadedDash":
function() { return game.isObjectEmpty(this.loadedDash) != true; }
,"activeDash":
 function() { if (this.hasLoadedDash() == true) {return this.loadedDash;}else { return this.MyDashboard; }}
,"Target":0,"Scenes":[{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5","DelimitedGrid":"0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0;0,0,4,4,0,0,3,3,0,0,0,0,0,0,0,0,3,3,0,0,4,4,0,0;0,0,4,4,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,4,4,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":267}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { game.active().Omnipresent2D.push(this); this.MyIndex = index; return true; }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1278}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1277},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1277},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1277},"MyColor":"FFF","X":160,"Y":256,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":true,"NotWorldLevel":true,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"hero","LocalData":"","TypeName":"Entity","Id":1277},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1279}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1278},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1278},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/grass32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5009}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1278},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1278},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1280}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1279},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1279},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stone32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5010}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1279},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1279},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1281}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1280},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1280},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5011},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5012},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5013},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5014},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5015},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5016},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5017},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5018},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5019},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5020},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5021},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5022},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5023},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5024},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5025}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1280},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1280},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1282}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1281},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1281},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stoneWall32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5026}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1281},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1281},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1283}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1282},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1282},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/dirt32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5027}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1282},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1282},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1284}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1283},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1283},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5028}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1283},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1283}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":270}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":270},"Name":"","LocalData":"","TypeName":"Scene","Id":272},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,4,4,4,4,4,4,4,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":268}],"AdhocSceneRefs":[{"TargetName":"hero","update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":320,"Y":320,"W":32,"H":32,"TargetX":0,"TargetY":0,"SkipXMove":true,"SkipYMove":true,"TargetScene":16,"LocalScene":1,"Name":"","LocalData":"","TypeName":"AdhocSceneRef","Id":25}],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1285}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1284},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1284},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5029}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1284},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1284},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1286}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1285},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1285},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5030}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1285},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1285},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1287}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1286},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1286},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5031},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5032},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5033},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5034},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5035},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5036},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5037},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5038},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5039},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5040},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5041},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5042},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5043},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5044},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5045}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1286},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1286},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1288}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1287},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1287},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5046}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1287},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1287},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1289}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1288},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1288},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5047}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1288},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1288},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1290}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1289},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1289},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5048}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1289},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1289},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1291}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1290},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1290},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/ivanGreatForest169_cc_testStairsDown0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169testStairsDown0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5049}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1290},"MyColor":"","X":320,"Y":320,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":true,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"testStairsDown","LocalData":"","TypeName":"Entity","Id":1290}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":271}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":271},"Name":"","LocalData":"","TypeName":"Scene","Id":273},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":269}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1292}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1291},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1291},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5050}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1291},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1291},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1293}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1292},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1292},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5051}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1292},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1292},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1294}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1293},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1293},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5052},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5053},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5054},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5055},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5056},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5057},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5058},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5059},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5060},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5061},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5062},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5063},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5064},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5065},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5066}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1293},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1293},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1295}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1294},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1294},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5067}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1294},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1294}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":272}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":272},"Name":"","LocalData":"","TypeName":"Scene","Id":274},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":270}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1296}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1295},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1295},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/grass32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5068}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1295},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1295},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1297}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1296},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1296},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stone32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5069}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1296},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1296},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1298}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1297},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1297},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5070},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5071},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5072},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5073},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5074},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5075},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5076},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5077},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5078},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5079},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5080},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5081},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5082},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5083},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5084}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1297},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1297},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1299}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1298},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1298},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/stoneWall32.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5085}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1298},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1298}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":273}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":273},"Name":"","LocalData":"","TypeName":"Scene","Id":275},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":271}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1300}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1299},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1299},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5086}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1299},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1299},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1301}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1300},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1300},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5087}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1300},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1300},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1302}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1301},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1301},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5088},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5089},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5090},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5091},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5092},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5093},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5094},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5095},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5096},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5097},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5098},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5099},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5100},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5101},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5102}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1301},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1301},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1303}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1302},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1302},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5103}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1302},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1302}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":274}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":274},"Name":"","LocalData":"","TypeName":"Scene","Id":276},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":272}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1304}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1303},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1303},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5104}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1303},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1303},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1305}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1304},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1304},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5105}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1304},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1304},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1306}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1305},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1305},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5108},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5109},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5110},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5111},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5112},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5113},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5114},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5115},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5116},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5117},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5118},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5119},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5120},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5106},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5107}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1305},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1305},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1307}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1306},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1306},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5121}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1306},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1306}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":275}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":275},"Name":"","LocalData":"","TypeName":"Scene","Id":277},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":273}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1308}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1307},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1307},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5122}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1307},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1307},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1309}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1308},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1308},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5123}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1308},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1308},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1310}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1309},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1309},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5124},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5125},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5126},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water4.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5127},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water5.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5128},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water6.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5129},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water7.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5130},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water8.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5131},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water9.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5132},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water10.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5133},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water11.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5134},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water12.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5135},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water13.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5136},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water14.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5137},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/water15.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5138}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1309},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1309},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1311}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1310},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1310},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5139}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1310},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1310}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":276}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":276},"Name":"","LocalData":"","TypeName":"Scene","Id":278},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":274}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1312}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1311},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1311},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5140}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1311},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1311},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1313}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1312},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1312},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5141}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1312},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1312},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1314}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1313},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1313},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5142},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5143},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5144},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5145},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5146},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5147},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5148},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5149},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5150},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5151},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5152},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5153},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5154},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5155},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5156}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1313},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1313},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1315}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1314},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1314},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5157}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1314},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1314}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":277}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":277},"Name":"","LocalData":"","TypeName":"Scene","Id":279},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":275}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1316}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1315},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1315},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5158}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1315},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1315},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1317}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1316},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1316},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5159}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1316},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1316},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1318}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1317},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1317},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5161},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5162},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5163},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5164},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5165},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5166},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5167},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5168},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5169},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5170},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5171},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5172},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5173},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5174},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5160}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1317},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1317},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1319}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1318},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1318},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5175}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1318},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1318}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":278}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":278},"Name":"","LocalData":"","TypeName":"Scene","Id":280},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":276}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1320}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1319},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1319},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5176}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1319},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1319},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1321}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1320},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1320},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5177}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1320},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1320},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1322}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1321},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1321},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5178},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5179},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5180},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5181},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5182},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5183},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5184},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5185},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5186},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5187},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5188},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5189},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5190},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5191},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5192}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1321},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1321},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1323}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1322},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1322},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5193}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1322},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1322}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":279}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":279},"Name":"","LocalData":"","TypeName":"Scene","Id":281},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":277}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1324}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1323},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1323},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5194}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1323},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1323},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1325}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1324},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1324},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5195}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1324},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1324},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1326}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1325},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1325},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5202},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5203},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5204},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5205},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5206},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5207},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5208},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5209},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5210},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5196},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5197},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5198},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5199},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5200},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5201}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1325},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1325},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1327}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1326},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1326},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5211}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1326},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1326}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":280}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":280},"Name":"","LocalData":"","TypeName":"Scene","Id":282},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":278}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1328}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1327},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1327},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5212}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1327},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1327},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1329}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1328},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1328},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5213}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1328},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1328},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1330}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1329},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1329},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5214},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5215},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5216},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5217},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5218},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5219},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5220},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5221},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5222},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5223},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5224},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5225},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5226},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5227},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5228}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1329},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1329},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1331}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1330},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1330},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5229}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1330},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1330}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":281}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":281},"Name":"","LocalData":"","TypeName":"Scene","Id":283},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":279}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1332}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1331},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1331},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5230}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1331},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1331},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1333}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1332},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1332},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5231}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1332},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1332},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1334}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1333},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1333},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5232},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5233},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5234},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5235},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5236},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5237},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5238},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5239},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5240},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5241},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5242},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5243},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5244},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5245},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5246}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1333},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1333},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1335}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1334},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1334},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5247}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1334},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1334}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":282}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":282},"Name":"","LocalData":"","TypeName":"Scene","Id":284},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":280}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1336}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1335},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1335},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5248}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1335},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1335},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1337}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1336},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1336},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5249}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1336},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1336},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1338}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1337},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1337},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5250},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5251},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5252},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5253},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5254},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5255},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5256},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5257},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5258},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5259},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5260},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5261},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5262},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5263},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5264}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1337},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1337},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1339}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1338},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1338},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5265}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1338},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1338}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":283}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":283},"Name":"","LocalData":"","TypeName":"Scene","Id":285},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":281}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1340}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1339},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1339},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5266}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1339},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1339},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1341}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1340},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1340},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5267}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1340},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1340},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1342}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1341},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1341},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5268},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5269},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5270},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5271},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5272},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5273},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5274},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5275},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5276},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5277},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5278},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5279},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5280},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5281},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5282}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1341},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1341},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1343}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1342},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1342},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5283}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1342},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1342}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":284}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":284},"Name":"","LocalData":"","TypeName":"Scene","Id":286},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4","DelimitedGrid":"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0,0,0,0,0","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":282}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1344}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1343},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1343},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5284}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1343},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1343},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1345}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1344},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1344},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5285}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1344},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1344},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1346}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1345},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1345},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5286},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5287},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5288},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5289},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5290},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5291},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5292},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5293},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5294},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5295},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5296},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5297},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5298},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5299},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5300}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1345},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1345},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1347}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1346},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1346},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5301}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1346},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1346}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":285}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":285},"Name":"","LocalData":"","TypeName":"Scene","Id":287},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5,tile6","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":283}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1348}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1347},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1347},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5302}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1347},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1347},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1349}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1348},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1348},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5303}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1348},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1348},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1350}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1349},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1349},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5304},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5305},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5306},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5307},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5308},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5309},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5310},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5311},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5312},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5313},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5314},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5315},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5316},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5317},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5318}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1349},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1349},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1351}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1350},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1350},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5319}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1350},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1350},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1352}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1351},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1351},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5320}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1351},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1351},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1353}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1352},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1352},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5321}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1352},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1352}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":286}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":286},"Name":"","LocalData":"","TypeName":"Scene","Id":288},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5,tile6","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":284}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1354}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1353},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1353},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5322}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1353},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1353},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1355}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1354},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1354},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5323}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1354},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1354},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1356}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1355},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1355},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5324},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5325},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5326},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5327},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5328},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5329},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5330},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5331},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5332},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5333},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5334},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5335},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5336},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5337},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5338}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1355},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1355},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1357}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1356},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1356},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5339}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1356},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1356},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1358}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1357},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1357},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5340}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1357},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1357},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1359}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1358},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1358},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5341}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1358},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1358}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":287}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":287},"Name":"","LocalData":"","TypeName":"Scene","Id":289},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5,tile6","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":285}],"AdhocSceneRefs":[{"TargetName":"hero","update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":320,"Y":160,"W":32,"H":32,"TargetX":0,"TargetY":0,"SkipXMove":true,"SkipYMove":true,"TargetScene":3,"LocalScene":18,"Name":"","LocalData":"","TypeName":"AdhocSceneRef","Id":26}],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1360}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1359},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1359},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5342}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1359},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1359},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1361}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1360},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1360},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5343}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1360},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1360},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1362}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1361},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1361},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5344},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5345},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5346},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5347},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5348},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5349},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5350},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5351},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5352},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5353},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5354},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5355},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5356},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5357},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5358}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1361},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1361},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1363}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1362},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1362},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5359}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1362},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1362},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1364}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1363},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1363},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5360}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1363},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1363},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1365}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1364},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1364},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5361}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1364},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1364},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1366}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1365},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1365},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/ivanGreatForest169_cc_testStairs0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169testStairs0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5362}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1365},"MyColor":"","X":320,"Y":160,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":true,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"testStairs","LocalData":"","TypeName":"Entity","Id":1365}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":288}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":288},"Name":"","LocalData":"","TypeName":"Scene","Id":290},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":286}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1367}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1366},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1366},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5363}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1366},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1366},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1368}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1367},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1367},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5364}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1367},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1367},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1369}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1368},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1368},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5365},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5366},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5367},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5368},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5369},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5370},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5371},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5372},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5373},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5374},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5375},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5376},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5377},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5378},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5379}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1368},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1368},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1370}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1369},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1369},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5380}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1369},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1369},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1371}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1370},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1370},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5381}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1370},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1370},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1372}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1371},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1371},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5382}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1371},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1371}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":289}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":289},"Name":"","LocalData":"","TypeName":"Scene","Id":291},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":287}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1373}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1372},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1372},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5383}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1372},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1372},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1374}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1373},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1373},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5384}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1373},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1373},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1375}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1374},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1374},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5385},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5386},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5387},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5388},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5389},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5390},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5391},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5392},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5393},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5394},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5395},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5396},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5397},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5398},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5399}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1374},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1374},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1376}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1375},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1375},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5400}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1375},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1375},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1377}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1376},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1376},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5401}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1376},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1376},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1378}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1377},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1377},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5402}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1377},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1377}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":290}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":290},"Name":"","LocalData":"","TypeName":"Scene","Id":292},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() {  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); return moveX; } }
,"shiftToLeft":
function() { var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0); return moveX; } }
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":640,"YResolution":400,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tile1,tile2,tile3,tile4,tile5","DelimitedGrid":"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4;4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4","SkipDraw":false,"MainGrid":true,"TW":32,"TH":32,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":288}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1379}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1378},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1378},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'grass32');}
,"NameOfTarget":"grass32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5403}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1378},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile1","LocalData":"","TypeName":"Entity","Id":1378},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1380}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1379},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1379},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stone32');}
,"NameOfTarget":"stone32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5404}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1379},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile2","LocalData":"","TypeName":"Entity","Id":1379},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1381}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1380},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1380},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":8,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water1');}
,"NameOfTarget":"water1","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5405},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water2');}
,"NameOfTarget":"water2","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5406},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water3');}
,"NameOfTarget":"water3","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5407},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water4');}
,"NameOfTarget":"water4","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5408},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water5');}
,"NameOfTarget":"water5","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5409},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water6');}
,"NameOfTarget":"water6","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5410},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water7');}
,"NameOfTarget":"water7","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5411},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water8');}
,"NameOfTarget":"water8","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5412},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water9');}
,"NameOfTarget":"water9","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5413},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water10');}
,"NameOfTarget":"water10","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5414},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water11');}
,"NameOfTarget":"water11","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5415},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water12');}
,"NameOfTarget":"water12","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5416},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water13');}
,"NameOfTarget":"water13","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5417},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water14');}
,"NameOfTarget":"water14","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5418},{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'water15');}
,"NameOfTarget":"water15","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5419}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1380},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile3","LocalData":"","TypeName":"Entity","Id":1380},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1382}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1381},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1381},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'stoneWall32');}
,"NameOfTarget":"stoneWall32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5420}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1381},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile4","LocalData":"","TypeName":"Entity","Id":1381},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1383}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1382},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1382},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return false;}
,"imageFilePath":null,"render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'dirt32');}
,"NameOfTarget":"dirt32","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5421}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1382},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile5","LocalData":"","TypeName":"Entity","Id":1382},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":1384}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":1383},"Name":"","LocalData":"","TypeName":"LogicBox","Id":1383},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'ivanGreatForest169tile60');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":5422}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":1383},"MyColor":"","X":0,"Y":0,"W":32,"H":32,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":true,"LedgeCollision":true,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tile6","LocalData":"","TypeName":"Entity","Id":1383}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":291}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":291},"Name":"","LocalData":"","TypeName":"Scene","Id":293}],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (leftkey()) { game.scene().tryMoveAll2DAround(8, 0, 'hero'); }}
,"MyScript":"if (leftkey()) [( game.scene().tryMoveAll2DAround(8, 0, **hero**); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":49},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (rightkey()) { game.scene().tryMoveAll2DAround(-8, 0, 'hero'); }}
,"MyScript":"if (rightkey()) [( game.scene().tryMoveAll2DAround(-8, 0, **hero**); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":50},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (upkey()) { game.scene().tryMoveAll2DAround(0, 8, 'hero'); }}
,"MyScript":"if (upkey()) [( game.scene().tryMoveAll2DAround(0, 8, **hero**); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":51},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (downkey()) { game.scene().tryMoveAll2DAround(0, -8, 'hero'); }}
,"MyScript":"if (downkey()) [( game.scene().tryMoveAll2DAround(0, -8, **hero**); )]","Name":"","LocalData":"","TypeName":"SceneContextProceduralStatement","Id":52}],"Name":"","LocalData":"","TypeName":"SceneContextLogicBox","Id":15},"MyDashboard":{"draw":
 function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } }
,"initialize":
function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }}
,"MyLabels":[],"MyBars":[],"Name":"","LocalData":"","TypeName":"Dashboard","Id":15},"KeyHandlers":[{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":"","LocalData":"","TypeName":"KeyHandler","Id":183},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":"","LocalData":"","TypeName":"KeyHandler","Id":184},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":"","LocalData":"","TypeName":"KeyHandler","Id":185},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":"","LocalData":"","TypeName":"KeyHandler","Id":186},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":"","LocalData":"","TypeName":"KeyHandler","Id":187},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":"","LocalData":"","TypeName":"KeyHandler","Id":188},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":"","LocalData":"","TypeName":"KeyHandler","Id":189},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":"","LocalData":"","TypeName":"KeyHandler","Id":190},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":"","LocalData":"","TypeName":"KeyHandler","Id":191},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":"","LocalData":"","TypeName":"KeyHandler","Id":192},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":"","LocalData":"","TypeName":"KeyHandler","Id":193},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":"","LocalData":"","TypeName":"KeyHandler","Id":194},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":"","LocalData":"","TypeName":"KeyHandler","Id":195}],"XResolution2D":"0.4","YResolution2D":"0.4","getOmni2D":
function(index) { for(var i in this.Omnipresent2D) { if (this.Omnipresent2D[i].MyIndex == index) { return this.Omnipresent2D[i]; } } }
,"getOmni3D":
function(index) { for(var i in this.Omnipresent3D) { if (this.Omnipresent3D[i].MyIndex == index) { return this.Omnipresent3D[i]; } } }
,"Omnipresent2D":
[]
,"Omnipresent3D":
[]
,"SceneGrids":[{"update":
function(target) { for(var i in this.SceneRefs) { if (this.SceneRefs[i].LocalScene === game.active().Target) { this.SceneRefs[i].update(target); } } }
,"TargetEntity":"hero","DelimitedGrid":"0,1,2,3;4,5,6,7;8,9,10,11;12,13,14,15","SceneList":"","WorldWrap":false,"SceneRefs":[{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":4,"LocalScene":0,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":1,"LocalScene":0,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":5,"LocalScene":1,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":0,"LocalScene":1,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":2,"LocalScene":1,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":6,"LocalScene":2,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":1,"LocalScene":2,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":3,"LocalScene":2,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":7,"LocalScene":3,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":2,"LocalScene":3,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":0,"LocalScene":4,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":8,"LocalScene":4,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":5,"LocalScene":4,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":1,"LocalScene":5,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":9,"LocalScene":5,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":4,"LocalScene":5,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":6,"LocalScene":5,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":2,"LocalScene":6,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":10,"LocalScene":6,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":5,"LocalScene":6,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":7,"LocalScene":6,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":3,"LocalScene":7,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":11,"LocalScene":7,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":6,"LocalScene":7,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":4,"LocalScene":8,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":12,"LocalScene":8,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":9,"LocalScene":8,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":5,"LocalScene":9,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":13,"LocalScene":9,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":8,"LocalScene":9,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":10,"LocalScene":9,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":6,"LocalScene":10,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":14,"LocalScene":10,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":9,"LocalScene":10,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":11,"LocalScene":10,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":7,"LocalScene":11,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":15,"LocalScene":11,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":10,"LocalScene":11,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":8,"LocalScene":12,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":13,"LocalScene":12,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":9,"LocalScene":13,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":12,"LocalScene":13,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":14,"LocalScene":13,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":10,"LocalScene":14,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":13,"LocalScene":14,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":15,"LocalScene":14,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":11,"LocalScene":15,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":14,"LocalScene":15,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0}],"Name":"","LocalData":"","TypeName":"SceneGrid","Id":26},{"update":
function(target) { for(var i in this.SceneRefs) { if (this.SceneRefs[i].LocalScene === game.active().Target) { this.SceneRefs[i].update(target); } } }
,"TargetEntity":"hero","DelimitedGrid":"16,17,18;19,20,21","SceneList":"","WorldWrap":false,"SceneRefs":[{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":19,"LocalScene":16,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":17,"LocalScene":16,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":20,"LocalScene":17,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":16,"LocalScene":17,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":18,"LocalScene":17,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":416,"W":768,"H":4,"TargetX":0,"TargetY":-8,"SkipXMove":true,"SkipYMove":false,"TargetScene":21,"LocalScene":18,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":17,"LocalScene":18,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":16,"LocalScene":19,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":20,"LocalScene":19,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":17,"LocalScene":20,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":19,"LocalScene":20,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":656,"Y":0,"W":4,"H":768,"TargetX":-8,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":21,"LocalScene":20,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-16,"W":768,"H":4,"TargetX":0,"TargetY":384,"SkipXMove":true,"SkipYMove":false,"TargetScene":18,"LocalScene":21,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-16,"Y":0,"W":4,"H":768,"TargetX":624,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":20,"LocalScene":21,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0}],"Name":"","LocalData":"","TypeName":"SceneGrid","Id":27}],"SceneCubes":[],"Name":"","LocalData":"","TypeName":"SceneContext","Id":15}],"EventBoard":{"setEventValue":
 function(nameOf,value) {for(var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { this.EventItems[i].Value = value; return 'success'; } } this.addEvent(nameOf,value);}
,"addEvent":
 function(nameOf,value) {this.EventItems.push({Name:nameOf,Value:value})}
,"getEventValue":
 function(nameOf) {for (var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { return this.EventItems[i].Value; } } return 'null';}
,"webServiceUrl":
 function(loadVsSave) {var locRef = location.href; var segments = locRef.split('/'); locRef = segments[0] + '//' + segments[2] + '/AccessObject.asmx/' + (loadVsSave ? 'Load' : 'Save') + 'Game'; return locRef;}
,"loadGame":
 function(targetIndex) {var newData = '';function storeData(data) { xData = data.substring(data.indexOf('http://clearwinggames.com/') + 28); xData = xData.replace('</string>',''); alert(xData); newData = xData; integrateData(xData); }var loadObj = {GameSave:{},GameName:game.Name,TargetIndex:targetIndex};$.get(this.webServiceUrl(true),'jsonObject=' + JSON.stringify(loadObj),function(data){ alert(data); storeData(data); },'text');function integrateData(xData) {alert('running ' + xData + 'against eventboard.');var newObj = jQuery.parseJSON(xData);for (var i in newObj.Deliverable.DataItems) {if (game.EventBoard.getEventValue(newObj.Deliverable.DataItems[i].Name) !== 'null') { game.EventBoard.setEventValue(newObj.Deliverable.DataItems[i].Name, newObj.Deliverable.DataItems[i].Value); } else {game.EventBoard.EventItems.push({ Value: newObj.Deliverable.DataItems[i].Value }); }}}}
,"saveGame":
 function(targetIndex) {var saveObj = {DataItems: [], GameName: game.Name, TargetIndex:targetIndex };for(var i in this.EventItems) {saveObj.DataItems.push({ Name:this.EventItems[i].Name, Value: this.EventItems[i].Value });}$.post(this.webServiceUrl(false), 'jsonObject=' + JSON.stringify(saveObj), function(data) { alert(data); }, 'text');}
,"EventItems":[],"Name":"","LocalData":"","TypeName":"EventBoard","Id":15},"DataLibrary":{"updateDashboardTo":
function(nameOf) { let dash = this.getViewByName(nameOf).asDashboard(); game.active().MyDashboard = dash; }
,"getViewByName":
function(nameOf) { for (var i in this.DataViews) { if (this.DataViews[i].Name==nameOf) { return this.DataViews[i]; } } }
,"getModelByName":
 function(name) { for(var i in this.DataModels) {if (this.DataModels[i].Name == name) { return this.DataModels[i]; }}return null;}
,"DataModels":[],"DataViews":[],"Name":"","LocalData":"","TypeName":"DataLibrary","Id":15},"AOPEngine":{"setup":
 function() {for(var i in this.AdviceBlocks) { this.AdviceBlocks[i].setup(); }  console.log('aops');}
,"AdviceBlocks":[],"Name":"","LocalData":"","TypeName":"AOPEngine","Id":15},"Classes":
{Entity: function Entity(){this.MyLogic = new game.Classes.LogicBox();;this.MyImage = new game.Classes.ImageBox();;this.MyColor = null;this.X = 0;this.Y = 0;this.W = 32;this.H = 32;this.MX = null;this.MY = null;this.Disabled = null;this.MyIndex = null;this.Omnipresent = null;this.NotWorldLevel = null;this.NonCorporeal = null;this.ForceCollision = null;this.LedgeCollision = null;this.AnimationCount = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } ;this.cycleLogic = function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } ;this.update = function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } ;this.draw =  function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }};this.transpose = function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; };this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.center =  function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };};this.R =  function() {return this.X + this.W;};this.B =  function() {return this.Y + this.H;};this.isAdjacent =  function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;};this.isCentered = function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); };this.pastCenterX = function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); };this.pastCenterY = function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); };this.isCenteredX = function() { return this.myCenterX()===(getXDrawBounds2D()/2);  };this.isCenteredY = function() { return this.myCenterY()===(getYDrawBounds2D()/2); };this.myCenterX = function() { return this.X + (this.W/2);  };this.myCenterY = function() { return this.Y + (this.H/2); };this.myCenter = function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  };this.wouldCollide =  function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());};this.move = function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; };this.isCarrying = function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); };this.isAtop = function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); };this.getThoseAtop =  function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; };this.moveWithCargo = function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); };this.destroyMe = function() { game.scene().Entities[this.MyIndex] = {}; };this.IsAOPObject = function() { return true; };this.TypeName = Entity;},Threntity: function Threntity(){this.MyIndex = null;this.MX = null;this.MY = null;this.MZ = null;this.prevMY = null;this.W = null;this.H = null;this.D = null;this.TileX = null;this.TileY = null;this.Omnipresent = null;this.AnimationCount = null;this.MyLogic = null;this.MyTexture = null;this.UpTexture = null;this.DownTexture = null;this.EastTexture = null;this.WestTexture = null;this.NorthTexture = null;this.SouthTexture = null;this.MyPrimitives = null;this.X = null;this.Y = null;this.Z = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.drop =  function() {game.scene().Threntities.splice(this.MyIndex, 1);};this.transpose =  function(xDisp,yDisp,zDisp) {let newThrent = new cwg.Threntity(); newThrent.name = this.Name; newThrent.X = this.X + xDisp; newThrent.Y = this.Y + yDisp; newThrent.Z = this.Z + zDisp; newThrent.H = this.H; newThrent.W = this.W; newThrent.D = this.D; return newThrent;};this.setup =  function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);};this.cycleLogic = function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } ;this.setImageTarget = function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); };this.draw =  function() {};this.update =  function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}};this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.myCube =  function() {return this.cube;};this.cube = {};this.updateCubeMaterial = function() { };this.updateCube =  function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;};this.doesBorder =  function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;};this.collideZX =  function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);};this.collideX =  function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));};this.collideY =  function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));};this.collideZ =  function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));};this.wouldCollide =  function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);};this.move = function(xAmt, yAmt, zAmt) { this.X += xAmt; this.Y += yAmt; this.Z += zAmt; };this.isCarrying = function(other) { return this.deviationOfOne(this.T(), other.B()) && this.R() > other.X && this.X < other.R() && this.F() > other.Z && this.Z < other.F(); };this.isAtop = function(other) { return this.deviationOfOne(this.B(), other.T()) && this.R() > other.X && this.X < other.R() && this.F() > other.Z && this.Z < other.F(); };this.deviationOfOne = function(fVal, sVal) { if ((fVal - sVal <= 1 && fVal - sVal >= -1) || (sVal - fVal <= 1 && sVal - fVal >= -1)) return true; else { return false; } };this.getThoseAtop =  function() { let those = game.scene().allThrentities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; };this.moveWithCargo = function(xAmt, yAmt, zAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt, zAmt); } this.move(xAmt, yAmt, zAmt); };this.destroyMe = function() { game.scene().Threntities[this.MyIndex] = {}; };this.jump =  function(thrust) {if (this.notFalling()) { this.MY = thrust; }};this.notFalling =  function() {return this.MY == 0 && this.prevMY == 0;};this.L =  function() {return this.X - (this.W / parseFloat(2));};this.R =  function() {return this.X + (this.W / parseFloat(2));};this.T =  function() {return this.Y + (this.H / parseFloat(2));};this.B = function() { return this.Y - (this.H / parseFloat(2)); };this.A = function() { return this.Z - (this.D / parseFloat(2)); };this.F =  function() {return this.Z + (this.D / parseFloat(2));};this.isActive = true;this.IsAOPObject = function() { return true; };this.TypeName = Threntity;},ImageBox: function ImageBox(){this.Target = null;this.CycleLength = null;this.ImageFrames = [];this.Name = null;this.LocalData = null;this.Id = null;this.active =  function() {return this.ImageFrames[this.Target];};this.TypeName = ImageBox;},LogicBox: function LogicBox(){this.OnUpdate = [];this.MyInputs = [];this.ActionBlock = {setup:function() { },update:function() { }};this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  };this.update =  function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } };this.TypeName = LogicBox;},Dashboard: function Dashboard(){this.MyLabels = null;this.MyBars = null;this.Name = null;this.LocalData = null;this.Id = null;this.draw =  function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } };this.initialize = function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }};this.TypeName = Dashboard;},DashLabel: function DashLabel(){this.Caption = null;this.FontSize = null;this.X = null;this.Y = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.getCaption =  function() { return this.processText(this.Caption);} ;this.setCaption =  function(newCaption) {this.Caption = newCaption;};this.render =  function() {drawString(this.X, this.Y, this.getCaption(), this.MyColor, this.FontSize);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashLabel;},DashBar: function DashBar(){this.H = null;this.MaxWidth = null;this.MaxValue = null;this.Value = null;this.X = null;this.Y = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.calculateWidth =  function() {return this.MaxWidth * (this.Value / this.MaxValue);};this.render =  function() {drawRectangle(this.X, this.Y, this.calculateWidth(), this.H, this.MyColor);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashBar;},}
,"Name":"ivanGreatForest169","LocalData":"","TypeName":"Game","Id":15};
</script><img id="grass32" src="http://cwg.dyndns-home.com/Pages/TempImages/grass32.png" style="display: none;" /><img id="stone32" src="http://cwg.dyndns-home.com/Pages/TempImages/stone32.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stoneWall32" src="http://cwg.dyndns-home.com/Pages/TempImages/stoneWall32.png" style="display: none;" /><img id="dirt32" src="http://cwg.dyndns-home.com/Pages/TempImages/dirt32.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169testStairsDown0" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_testStairsDown0.png" style="display: none;" /><img id="grass32" src="http://cwg.dyndns-home.com/Pages/TempImages/grass32.png" style="display: none;" /><img id="stone32" src="http://cwg.dyndns-home.com/Pages/TempImages/stone32.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="stoneWall32" src="http://cwg.dyndns-home.com/Pages/TempImages/stoneWall32.png" style="display: none;" /><img id="water1" src="http://cwg.dyndns-home.com/Pages/TempImages/water1.png" style="display: none;" /><img id="water2" src="http://cwg.dyndns-home.com/Pages/TempImages/water2.png" style="display: none;" /><img id="water3" src="http://cwg.dyndns-home.com/Pages/TempImages/water3.png" style="display: none;" /><img id="water4" src="http://cwg.dyndns-home.com/Pages/TempImages/water4.png" style="display: none;" /><img id="water5" src="http://cwg.dyndns-home.com/Pages/TempImages/water5.png" style="display: none;" /><img id="water6" src="http://cwg.dyndns-home.com/Pages/TempImages/water6.png" style="display: none;" /><img id="water7" src="http://cwg.dyndns-home.com/Pages/TempImages/water7.png" style="display: none;" /><img id="water8" src="http://cwg.dyndns-home.com/Pages/TempImages/water8.png" style="display: none;" /><img id="water9" src="http://cwg.dyndns-home.com/Pages/TempImages/water9.png" style="display: none;" /><img id="water10" src="http://cwg.dyndns-home.com/Pages/TempImages/water10.png" style="display: none;" /><img id="water11" src="http://cwg.dyndns-home.com/Pages/TempImages/water11.png" style="display: none;" /><img id="water12" src="http://cwg.dyndns-home.com/Pages/TempImages/water12.png" style="display: none;" /><img id="water13" src="http://cwg.dyndns-home.com/Pages/TempImages/water13.png" style="display: none;" /><img id="water14" src="http://cwg.dyndns-home.com/Pages/TempImages/water14.png" style="display: none;" /><img id="water15" src="http://cwg.dyndns-home.com/Pages/TempImages/water15.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169testStairs0" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_testStairs0.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><img id="ivanGreatForest169tile60" src="http://cwg.dyndns-home.com/Pages/TempImages/ivanGreatForest169_cc_tile60.png" style="display: none;" /><script>function getCanvas()
 {
var canvas = document.getElementById('gameCanvas');
return canvas.getContext('2d');
}
function toggleFullScreen() {
var canv = document.getElementById('gameCanvas');
if (canv.webkitRequestFullscreen) {
canv.webkitRequestFullscreen();
}
else {
canv.mozRequestFullScreen();
}
reallignCanvases();
}
var reallignCanvases = function() {
var rect = document.getElementById('canvasDiv').getBoundingClientRect();
$('#threeCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10});
$('#gameCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10,'position':'absolute'});
}
function cAlert(msg) {
game.fadingMessage(msg, 90);
}
function cAlert(msg,dur) {
game.fadingMessage(msg,dur);
}
function pAlert(msg) {
}
function drawStringWithFont(x, y, msg, colorString, fontData)
 {
getCanvas().font=fontData;
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString)
 {
getCanvas().font='16px Georgia';
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString, fontSize) {
getCanvas().font = fontSize + 'px Georgia';
getCanvas().fillStyle = colorString;
getCanvas().fillText(msg, x, y);
}
function drawRectangle(x, y, w, h, color)
 {
getCanvas().fillStyle = color;
getCanvas().fillRect(x,y,w,h);
}
function drawImage(x, y, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y);
}
}
function drawImage(x, y, w, h, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y, w, h);
} else { alert('imgObj not ready or not found.'); }
}
var context = new (window.AudioContext || window.webkitAudioContext)();
function playNote(note,dur,inst) {
if (note > 0) {
var osc = context.createOscillator(); // instantiate an oscillator
osc.type = inst; // 'sine' is the default - also square, sawtooth, triangle
osc.frequency.value = note; // Hz
osc.connect(context.destination); // connect it to the destination
osc.start(); // start the oscillator
osc.stop(context.currentTime + dur);
}
}
function rgb(r, g, b) {
return 'rgb(' + r.toString() + ',' + g.toString() + ',' + b.toString() + ')';}
var scene = new THREE.Scene();
var threejsClearColor = 0x000000;
var camera = new THREE.PerspectiveCamera( 75, (4/3), 0.25, 18000 );
var renderer = new THREE.WebGLRenderer({ canvas: threeCanvas, alpha: false, autoclear: true });
renderer.setClearColor(threejsClearColor);
function updateClearColor(newColor) { renderer.setClearColor(newColor); }
function addAmbientLightToCurrentScene(color, intensity) { scene.add(new THREE.AmbientLight(color, intensity)); }
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;
camera.position.y = 120;
camera.position.z = 300;
setupContent(scene);
var renderThree = function () {
requestAnimationFrame( renderThree );
renderer.render(scene, camera);
};
renderThree();
function setupContent(scene) {
var geometries = [];
for (var j in geometries) {
for ( var i = 0; i < geometries[j].faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometries[j].faces[ i ].color.setHex( hex );
geometries[j].faces[ i + 1 ].color.setHex( hex );
}
var material = new THREE.MeshLambertMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });var cube = new THREE.Mesh( geometries[j], material );
if (j > 0) { cube.position.z -= (200 * j); }
scene.add(cube);
}
}
function setupPointLight(pointLight) {
let newLight = new THREE.PointLight(pointLight.LightColor, pointLight.Intensity / parseFloat(100), pointLight.Distance, pointLight.Decay / parseFloat(100));
newLight.castShadow = true;
newLight.position.set(pointLight.X, pointLight.Y, pointLight.Z);
scene.add(newLight);
}
function setupThrentity(threntity) {
var geometry = new THREE.BoxGeometry(threntity.W, threntity.H, threntity.D);
if (threntity.MyTexture.ImageFrames.length > 0 && threntity.MyTexture.active().hasImagePath()) {
for(var i = 0; i < 1; i++) {
 if (threntity.MyTexture.ImageFrames[i].hasImagePath()){
var texture = new THREE.TextureLoader().load( threntity.MyTexture.ImageFrames[i].imageFilePath );
if (threntity.TileX > 0 && threntity.TileY > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, threntity.TileY );
}
else if (threntity.TileX > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, 1 );
}
else if (threntity.TileY > 0) { texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set(1, threntity.TileY );
}
}
}
}
for ( var i = 0; i < geometry.faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometry.faces[ i ].color.setHex( hex );
geometry.faces[ i + 1 ].color.setHex( hex );
}
var material;
if (threntity.MyTexture.ImageFrames.length == 0 || !threntity.MyTexture.active().hasImagePath()) {
material = new THREE.MeshLambertMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });
}
 else {
material = new THREE.MeshLambertMaterial({
map: texture,overdraw: 0.5 });
}
var lCube = new THREE.Mesh( geometry, material );
lCube.position.x = threntity.X;
lCube.position.y = threntity.Y;
lCube.position.z = threntity.Z;
threntity.cube = lCube;
scene.add(threntity.myCube());
}
function setupPrimitiveAs(prim) {
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(prim.fX, prim.fY, prim.fZ));
geom.vertices.push(new THREE.Vector3(prim.sX, prim.sY, prim.sZ));
geom.vertices.push(new THREE.Vector3(prim.tX, prim.tY, prim.tZ));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
if (prim.IsQuad === true) {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(1, 0),new THREE.Vector2(0, 0)]; 
 }
else {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(0, 1),new THREE.Vector2(0, 0)]; 
 }
if (prim.PrimitiveImages !== null && prim.PrimitiveImages.ImageFrames !== null && prim.PrimitiveImages.ImageFrames.length > 0 && prim.PrimitiveImages.active().hasImagePath()) {
var texture = new THREE.TextureLoader().load( prim.PrimitiveImages.active().imageFilePath );
material = new THREE.MeshLambertMaterial({
map: texture,side: THREE.DoubleSide,overdraw: 0.5 });
var mesh= new THREE.Mesh(geom, material);
scene.add(mesh);
return mesh;
}
else {
setupPrimitive(prim.fX, prim.fY, prim.fZ, prim.sX, prim.sY, prim.sZ, prim.tX, prim.tY, prim.tZ, prim.MyColor);
}
}
function setupPrimitive(fx, fy, fz, sx, sy, sz, tx, ty, tz, pColor) {
if (pColor === null || pColor.length === 0) { pColor = '#007'; }
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(fx, fy, fz));
geom.vertices.push(new THREE.Vector3(sx, sy, sz));
geom.vertices.push(new THREE.Vector3(tx, ty, tz));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
geom.computeFaceNormals();
var normalMaterial = new THREE.MeshLambertMaterial({color: pColor, side: THREE.DoubleSide});
var mesh= new THREE.Mesh( geom, normalMaterial);
scene.add(mesh);
return mesh;
}
function getVectorDifference(v1, v2) {return {X:v1.X-v2.X,Y:v1.Y-v2.Y,Z:v1.Z-v2.Z};}
function combineVectors(v1, v2) {return {X:v1.X+v2.X,Y:v1.Y+v2.Y,Z:v1.Z+v2.Z};}
function getCameraVector() {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(camera.quaternion);
return vector;
}
function getThrentityVector(thrent) {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(thrent.quaternion);
return vector;
}
function moveCameraForward(amt) {
var targetVector = getCameraVector();
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
camera.position.x += xAmt;
camera.position.y += yAmt;
camera.position.z += zAmt;
}
function moveCameraForwardUnless(amt) {
var targetVector = getCameraVector();
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
var before = new cwg.Threntity();
before.X = camera.position.x; before.Y = camera.position.y; before.Z = camera.position.z;
 var after = before.transpose(xAmt, yAmt, zAmt);
if (game.scene().checkMovePoint3d(before, after)==true) {camera.position.x += xAmt;
camera.position.y += yAmt;
camera.position.z += zAmt;
} else {  } }
function moveThrentityForward(thrent, amt) {
var targetVector = getThrentityVector(thrent.myCube());
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
thrent.X += xAmt;
thrent.Y += yAmt;
thrent.Z += zAmt;
}
function runMainSetup() {
 cwg = game.Classes;
mainSetup();
}
function mainSetup() {
reallignCanvases();
game.setup();
}
</script><script>startGame();</script></body></html>